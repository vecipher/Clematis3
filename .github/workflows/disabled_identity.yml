name: disabled-path-identity

on:
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: identity-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  identity:
    name: Golden identity (scheduler.disabled)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      LC_ALL: C
      PYTHONUTF8: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/setup.cfg', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        shell: bash
        run: |
          set -euxo pipefail
          export PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --upgrade pip
          # Prefer project editable install
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            python3 -m pip install -e ".[dev,test]" || python3 -m pip install -e .
          fi
          # Project requirements
          if [ -f requirements-dev.txt ]; then
            python3 -m pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            python3 -m pip install -r requirements.txt
          else
            python3 -m pip install pytest pyyaml numpy
          fi
          # Optional runtime used by snapshots; harmless if unused
          python3 -m pip install --quiet zstandard || true

      - name: Validate repo config (non-strict if present)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f scripts/validate_config.py ] && [ -f configs/config.yaml ]; then
            python3 scripts/validate_config.py configs/config.yaml || true
          fi

      - name: Validate strict (quiet) config
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f scripts/validate_config.py ]; then
            python3 scripts/validate_config.py .ci/validator_strict_quiet.yaml --strict
          else
            echo "scripts/validate_config.py not found"; exit 1
          fi

      - name: Identity unit test
        shell: bash
        run: |
          set -euxo pipefail
          pytest -q tests/test_identity_disabled_path.py::test_disabled_perf_and_quality_identity_to_base

      - name: CLI validator smoke (quiet config)
        shell: bash
        run: |
          set -euxo pipefail
          pytest -q tests/test_config_perf_quality.py::test_cli_validator_smoke

      - name: Run golden disabled identity guard
        shell: bash
        run: |
          set -euo pipefail
          echo "Running golden comparison (scheduler.enabled=false)â€¦"

          # 1) Produce fresh logs with disabled path
          rm -rf ./.logs ./.norm || true
          python3 scripts/run_demo.py --config .ci/disabled_path_config.yaml --policy round_robin --agents AgentA --steps 6 || true

          # 2) Normalize actual and golden using the shared helper
          python3 -c "from pathlib import Path; import sys,shutil; sys.path.insert(0, str(Path('.').resolve())); from tests.helpers.identity import normalize_logs_dir; actual=Path('./.logs'); assert actual.exists(), 'FATAL: ./.logs not found (run_demo did not produce logs)'; norm_root=Path('./.norm'); norm_root.mkdir(exist_ok=True); actual_out=norm_root/'actual'; golden_out=norm_root/'golden'; [shutil.rmtree(p) for p in (actual_out,golden_out) if p.exists()]; GOLD_DIR=Path('tests/golden/pre_m5_disabled'); assert GOLD_DIR.exists(), f'FATAL: golden dir not found: {GOLD_DIR}'; normalize_logs_dir(actual, actual_out); normalize_logs_dir(GOLD_DIR, golden_out); print('Normalized logs written to', norm_root)"

          # 3) Compare normalized files deterministically
          set +e
          echo "DIFF for t2.jsonl:";   diff -u ./.norm/golden/t2.jsonl   ./.norm/actual/t2.jsonl; st1=$?
          echo "DIFF for turn.jsonl:"; diff -u ./.norm/golden/turn.jsonl ./.norm/actual/turn.jsonl; st2=$?
          set -e

          if [ "$st1" -ne 0 ] || [ "$st2" -ne 0 ]; then
            echo "Golden identity mismatch" >&2
            exit 1
          fi
          echo "Golden identity OK"

      - name: Upload artifacts on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4 
        with:
          name: identity-diagnostics
          path: |
            ./.logs/**
            ./.norm/**
            ./.gold_norm/**
          if-no-files-found: ignore