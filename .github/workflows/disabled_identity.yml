name: disabled-path-identity

on:
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: identity-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  identity:
    name: Disabled identity [${{ matrix.os }} | py${{ matrix.python-version }}]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11', '3.12', '3.13']
    env:
      LC_ALL: C
      PYTHONUTF8: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true

      - name: Deterministic env
        run: |
          echo "PYTHONUTF8=1" >> $GITHUB_ENV
          echo "PYTHONIOENCODING=UTF-8" >> $GITHUB_ENV
          echo "PYTHONHASHSEED=0" >> $GITHUB_ENV
          echo "TZ=UTC" >> $GITHUB_ENV
          echo "SOURCE_DATE_EPOCH=315532800" >> $GITHUB_ENV
          echo "PIP_DISABLE_PIP_VERSION_CHECK=1" >> $GITHUB_ENV
          echo "CLEMATIS_NETWORK_BAN=1" >> $GITHUB_ENV

      - name: Disable Git autocrlf on Windows
        if: runner.os == 'Windows'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/setup.cfg', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install
        shell: bash
        run: |
          set -euxo pipefail
          python3 -m pip install --upgrade pip
          python3 -m pip install -e ".[test]"
          # Optional runtime used by snapshots; harmless if unused
          python3 -m pip install --quiet zstandard || true

      - name: Validate repo config (non-strict if present)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f scripts/validate_config.py ] && [ -f configs/config.yaml ]; then
            python3 scripts/validate_config.py configs/config.yaml || true
          fi

      - name: Validate strict (quiet) config
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f scripts/validate_config.py ]; then
            python3 scripts/validate_config.py .ci/validator_strict_quiet.yaml --strict
          else
            echo "scripts/validate_config.py not found"; exit 1
          fi

      - name: Identity unit test
        env:
          CLEMATIS_NETWORK_BAN: "1"
          CI: "true"
        shell: bash
        run: |
          set -euxo pipefail
          pytest -q -m "not manual" tests/test_identity_disabled_path.py::test_disabled_perf_and_quality_identity_to_base

      - name: CLI validator smoke (quiet config)
        env:
          CLEMATIS_NETWORK_BAN: "1"
          CI: "true"
        shell: bash
        run: |
          set -euxo pipefail
          pytest -q -m "not manual" tests/test_config_perf_quality.py::test_cli_validator_smoke

      - name: Pre-generate disabled-path logs (deterministic)
        env:
          CLEMATIS_NETWORK_BAN: "1"
          CI: "true"
          CLEMATIS_LOG_DIR: ${{ github.workspace }}/.logs
          CLEMATIS_LOGS_DIR: ${{ github.workspace }}/.logs
        shell: bash
        run: |
          set -euxo pipefail
          # Fresh logs dir to avoid stale runs
          rm -rf "${CLEMATIS_LOG_DIR}" || true
          mkdir -p "${CLEMATIS_LOG_DIR}"
          # Emit the deterministic demo logs expected by the golden guard
          python3 -m clematis.scripts.demo --steps 2 --text identity --fixed-now-ms 0
          # Quick sanity so failures are obvious in logs
          ls -lah "${CLEMATIS_LOG_DIR}" || true
          for f in t1.jsonl t2.jsonl t4.jsonl turn.jsonl; do
            [ -f "${CLEMATIS_LOG_DIR}/$f" ] && wc -l "${CLEMATIS_LOG_DIR}/$f" || echo "missing $f"
          done

      - name: Run golden disabled identity guard
        env:
          CLEMATIS_NETWORK_BAN: "1"
          CI: "true"
        shell: bash
        run: |
          set -euo pipefail
          # Use the shared Python guard which generates logs, normalizes, and compares
          python3 scripts/ci_compare_golden.py

      - name: Atomic IO tests (Windows only)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          set -euxo pipefail
          pytest -q tests/io/test_atomic_writes.py

      - name: Upload artifacts on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: identity-diagnostics
          path: |
            ./.logs/**
            ./.norm/**
            ./.gold_norm/**
          if-no-files-found: ignore
