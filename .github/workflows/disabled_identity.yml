name: disabled-path-identity

on:
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: identity-${{ github.ref }}
  cancel-in-progress: true

jobs:
  identity:
    name: Verify disabled-path identity (M6 guard)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      LC_ALL: C
      PYTHONUTF8: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: "${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/setup.cfg', '**/requirements*.txt') }}"
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (editable if available)
        shell: bash
        run: |
          set -euxo pipefail
          python3 -m pip install --upgrade pip
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            # Prefer project extras for consistent dev/test env
            python3 -m pip install -e ".[dev,test]" || python3 -m pip install -e .
          elif [ -f requirements.txt ]; then
            python3 -m pip install -r requirements.txt
          else
            # Minimal fallback for repos without packaging
            python3 -m pip install pytest pyyaml numpy
          fi

      - name: Validate repo config (non-strict if present)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f scripts/validate_config.py ]; then
            if [ -f configs/config.yaml ]; then
              python3 scripts/validate_config.py configs/config.yaml || (echo "Non-strict validation warnings; continuing" && true)
            fi
          else
            echo "scripts/validate_config.py not found; skipping non-strict validation"
          fi

      - name: Validate strict (quiet) config
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f scripts/validate_config.py ]; then
            python3 scripts/validate_config.py .ci/validator_strict_quiet.yaml --strict
          else
            echo "scripts/validate_config.py not found; failing strict step"
            exit 1
          fi

      - name: Run identity unit test
        shell: bash
        run: |
          set -euxo pipefail
          if [ -d tests ]; then
            pytest -q tests/test_identity_disabled_path.py::test_disabled_perf_and_quality_identity_to_base
          else
            echo "tests/ directory not found"; exit 1
          fi

      - name: CLI validator smoke (quiet config)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -d tests ]; then
            pytest -q tests/test_config_perf_quality.py::test_cli_validator_smoke
          else
            echo "tests/ directory not found"; exit 1
          fi

      - name: Normalize and diff logs (strict, Python normalizer)
        shell: bash
        run: |
          set -euxo pipefail
          GOLD_DIR="tests/goldens/pr29/.logs"
          if [ -d "$GOLD_DIR" ]; then
            # Always start from a clean state to avoid appended log lines across runs
            rm -rf ./.logs ./.norm ./.gold_norm
          
            # Run the disabled-path demo to generate fresh logs
            if [ -f scripts/run_demo.py ]; then
              python3 scripts/run_demo.py --config .ci/disabled_path_config.yaml --policy round_robin --agents AgentA --steps 6 || true
            else
              echo "scripts/run_demo.py not found; cannot produce logs" && exit 1
            fi
          
            mkdir -p ./.norm ./.gold_norm
            shopt -s nullglob
          
            # Normalize current logs using the shared Python normalizer (recursive key drop)
            for f in ./.logs/*.jsonl; do
              b="$(basename "$f")"
              python -m tests.helpers.identity < "$f" | LC_ALL=C sort > "./.norm/$b"
            done
          
            # Normalize golden logs using the same Python normalizer
            for f in "$GOLD_DIR"/*.jsonl; do
              b="$(basename "$f")"
              python -m tests.helpers.identity < "$f" | LC_ALL=C sort > "./.gold_norm/$b"
            done
          
            # Strict diff on normalized logs; any structural change will fail the job
            diff -ru ./.norm ./.gold_norm
          else
            echo "No goldens found at $GOLD_DIR; skipping diff"
          fi

      - name: Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: identity-diagnostics
          path: |
            ./.logs/**
            ./.norm/**
            ./.gold_norm/**