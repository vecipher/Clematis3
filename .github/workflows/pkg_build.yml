name: Reproducible Build (sdist & wheel)

on:
  pull_request:
    paths:
      - "pyproject.toml"
      - "MANIFEST.in"
      - "clematis/**"
      - "docs/m8/**"
      - ".github/workflows/**"
  push:
    branches: [ main ]
    tags:
      - 'v*'
  release:
    types: [ published ]

jobs:
  reproducible:
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    runs-on: ubuntu-latest
    env:
      # Repro knobs
      SOURCE_DATE_EPOCH: "1704067200"   # 2024-01-01T00:00:00Z (example)
      PYTHONHASHSEED: "0"
      TZ: "UTC"
      LC_ALL: "C.UTF-8"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      CLEMATIS_NETWORK_BAN: "1"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip build

      - name: Generate manpages (deterministic)
        run: |
          python scripts/gen_manpages.py --outdir man --module clematis --section 1

      - name: Build #1
        run: |
          set -euo pipefail
          rm -rf build dist *.egg-info
          python -m build
          ls -l dist

      - name: Twine check
        run: |
          python -m pip install --upgrade twine
          python -m twine check dist/*

      - name: Upload manpages artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: manpages
          path: man/*.1

      - name: Verify manpages in sdist & wheel (Build #1)
        run: |
          python -c "import tarfile,zipfile,glob; s=sorted(glob.glob('dist/*.tar.gz'))[-1]; w=sorted(glob.glob('dist/*.whl'))[-1]; import tarfile as _t, zipfile as _z; names=[m.name for m in _t.open(s,'r:gz').getmembers()]; assert any(n.endswith('/man/clematis.1') for n in names), 'sdist missing man/clematis.1'; names=_z.ZipFile(w).namelist(); assert any(n.endswith('/share/man/man1/clematis.1') for n in names), 'wheel missing share/man/man1/clematis.1'; print('OK: manpages present in both sdist & wheel.')"

      - name: Render check (best effort)
        continue-on-error: true
        run: |
          if command -v man >/dev/null 2>&1; then
            man -l man/clematis.1 | col -b | head -n 20
          else
            echo "man(1) not available on runner"
          fi

      - name: Canonicalize & hash #1
        run: |
          set -euo pipefail
          SDIST=$(ls dist/*.tar.gz)
          WHEEL=$(ls dist/*.whl)
          TMP=$(mktemp -d)
          # Ungzip to tar, normalize tar metadata and order, then gzip with fixed header
          gzip -dc "$SDIST" | tar -C "$TMP" -x
          tar --mtime="@$SOURCE_DATE_EPOCH" \
              --sort=name --owner=0 --group=0 --numeric-owner \
              -cf /tmp/sdist1.tar -C "$TMP" .
          gzip -n -c /tmp/sdist1.tar > /tmp/sdist1.tgz
          WH=$(sha256sum "$WHEEL" | awk '{print $1}')
          SH1=$(sha256sum /tmp/sdist1.tgz | awk '{print $1}')
          printf "%s  %s\n" "$WH" "WHEEL" > /tmp/hashes1.txt
          printf "%s  %s\n" "$SH1" "SDIST" >> /tmp/hashes1.txt

      - name: Build #2 (clean)
        run: |
          set -euo pipefail
          rm -rf build dist *.egg-info
          python -m build
          ls -l dist

      - name: Canonicalize & hash #2 and compare
        run: |
          set -euo pipefail
          SDIST=$(ls dist/*.tar.gz)
          WHEEL=$(ls dist/*.whl)
          TMP=$(mktemp -d)
          gzip -dc "$SDIST" | tar -C "$TMP" -x
          tar --mtime="@$SOURCE_DATE_EPOCH" \
              --sort=name --owner=0 --group=0 --numeric-owner \
              -cf /tmp/sdist2.tar -C "$TMP" .
          gzip -n -c /tmp/sdist2.tar > /tmp/sdist2.tgz
          WH=$(sha256sum "$WHEEL" | awk '{print $1}')
          SH2=$(sha256sum /tmp/sdist2.tgz | awk '{print $1}')
          printf "%s  %s\n" "$WH" "WHEEL" > /tmp/hashes2.txt
          printf "%s  %s\n" "$SH2" "SDIST" >> /tmp/hashes2.txt
          echo "=== DIFF (should be empty) ==="
          diff -u /tmp/hashes1.txt /tmp/hashes2.txt

  pkg-smoke-matrix:
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    name: Pkg smoke (${{ matrix.os }} / py${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12"]
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONUTF8: "1"
      PYTHONHASHSEED: "0"
      CLEMATIS_NETWORK_BAN: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Ensure long paths on Windows
        if: runner.os == 'Windows'
        run: git config --global core.longpaths true
        shell: pwsh

      - name: Install build backend
        run: python -m pip install --upgrade pip build

      - name: Build wheel (axis-local)
        run: python -m build --wheel

      - name: Smoke (posix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euxo pipefail
          WHL="$(ls dist/*.whl | head -n1)"
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install "$WHL[cli-demo]"

          # 1) version
          python -m clematis --version

          # 2) validate
          python -m clematis validate --json

          # 3) demo minimal
          python -m clematis demo -- --steps 1
          
          # 4) rotate-logs (dry-run)
          python -m clematis rotate-logs -- --dry-run

          # 5) inspect-snapshot (json)
          python -m clematis inspect-snapshot -- --format json

      - name: Verify installed manpage (Linux only)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          .venv/bin/python -c "import sysconfig, pathlib; d=sysconfig.get_paths()['data']; p=pathlib.Path(d)/'share'/'man'/'man1'/'clematis.1'; print('Expect manpage at:', p); assert p.exists(), f'installed manpage missing: {p}'; print('OK: installed man page present')"

      - name: CLI contract probes (Linux only)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          source .venv/bin/activate

          echo "validate --json (should succeed)"
          python -m clematis validate --json > /dev/null

          echo "inspect-snapshot missing dir (expect exit 2)"
          set +e
          python -m clematis inspect-snapshot -- --dir does_not_exist_dir_12345
          rc=$?
          set -e
          if [ "$rc" -ne 2 ]; then
            echo "Expected exit 2, got $rc" >&2
            exit 1
          fi

          echo "demo mutual exclusion (expect exit 1)"
          set +e
          python -m clematis demo -- --steps 1 --json --table
          rc=$?
          set -e
          if [ "$rc" -ne 1 ]; then
            echo "Expected exit 1, got $rc" >&2
            exit 1
          fi

          echo "rotate-logs structured summaries (both should succeed)"
          python -m clematis rotate-logs -- --dry-run --json > /dev/null
          python -m clematis rotate-logs -- --dry-run --table > /dev/null

      - name: Smoke (windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $whl = (Get-ChildItem dist\*.whl | Select-Object -First 1).FullName
          python -m venv .venv
          .\.venv\Scripts\python -m pip install --upgrade pip
          .\.venv\Scripts\python -m pip install "$whl[cli-demo]"

          # 1) version
          .\.venv\Scripts\python -m clematis --version

          # 2) validate
          .\.venv\Scripts\python -m clematis validate --json

          # 3) demo minimal
          .\.venv\Scripts\python -m clematis demo -- --steps 1

          # 4) rotate-logs (dry-run)
          .\.venv\Scripts\python -m clematis rotate-logs -- --dry-run

          # 5) inspect-snapshot (json)
          .\.venv\Scripts\python -m clematis inspect-snapshot -- --format json

      - name: Upload wheel (artifact per axis)
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl

  tag-sbom-attest:
    name: "Tag: build → SBOM → attest"
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'release' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Build sdist + wheel (deterministic)
        env:
          SOURCE_DATE_EPOCH: "1704067200"
        run: |
          python -m pip install --upgrade pip build twine
          python -m build
          python -m twine check dist/*

      - name: Generate CycloneDX SBOM (from clean venv)
        run: |
          python -m venv .sbom
          . .sbom/bin/activate
          python -m pip install --upgrade pip
          python -m pip install 'cyclonedx-bom>=4,<5'
          python -m pip install "dist/"*.whl[cli-demo] || python -m pip install dist/*.whl
          python -m cyclonedx_py environment \
            --output-format JSON \
            --schema-version 1.5 \
            --outfile dist/sbom.cdx.json
          deactivate

      - name: Verify SBOM is valid JSON
        run: |
          python - <<'PY'
          import json, sys
          json.load(open('dist/sbom.cdx.json'))
          print("SBOM JSON OK")
          PY

      - name: Upload SBOM as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: dist/sbom.cdx.json
          if-no-files-found: error

      - name: Attest provenance (wheel + sdist)
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: |
            dist/*.whl
            dist/*.tar.gz

      - name: Attach SBOM to Release
        if: ${{ github.event_name == 'release' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload "${{ github.event.release.tag_name }}" dist/sbom.cdx.json --clobber