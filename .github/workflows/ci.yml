name: ci
on:
  push: { branches: [main] }
  pull_request: { branches: [main] }

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install deps (dev+test extras) + YAML
        run: |
          python -m pip install -U pip
          pip install -e .[dev,test]
          # Ensure PyYAML is present (not included in extras)
          pip install pyyaml

      - name: Sanity imports
        continue-on-error: true
        run: |
          set -euxo pipefail
          python - <<'PY'
          import sys, os, traceback, importlib.util, site, pkgutil
          print("python:", sys.version)
          print("sys.executable:", sys.executable)
          print("sys.path[0:5]:", sys.path[:5])

          def show(msg, fn):
              print(f"\n--- {msg} ---")
              try:
                  fn()
                  print(f"--- {msg}: OK ---")
              except Exception as e:
                  print(f"*** {msg}: FAILED: {e}")
                  traceback.print_exc()

          def show_spec(name):
              spec = importlib.util.find_spec(name)
              print(f"find_spec({name!r}) ->", spec)

          show("pip list head", lambda: os.system("python -m pip list | head -n 50"))
          show("where site-packages", lambda: print(site.getsitepackages(), site.getusersitepackages()))

          show_spec("yaml")
          show("import yaml", lambda: __import__("yaml"))
          try:
              import yaml
              print("yaml version:", getattr(yaml, "__version__", "unknown"))
          except Exception:
              pass

          show_spec("clematis")
          show("import clematis", lambda: __import__("clematis"))
          try:
              import clematis
              print("clematis.__file__:", getattr(clemmatis, "__file__", None))
              root = os.path.dirname(getattr(clematis, "__file__", "") or "")
              print("ls clematis root:", os.listdir(root) if root and os.path.isdir(root) else "N/A")
          except Exception:
              pass

          show_spec("clematis.engine.stages.t4")
          def import_t4():
              import clematis.engine.stages.t4 as t4
              print("t4.__file__:", getattr(t4, "__file__", None))
              print("has t4_filter?", hasattr(t4, "t4_filter"))
          show("import clematis.engine.stages.t4", import_t4)
          PY

      - name: Run tests (offline)
        env:
          CLEMATIS_NETWORK_BAN: "1"
          CI: "true"
          PYTHONHASHSEED: "0"
        run: |
          set -euo pipefail
          pytest -q -m "not manual"

  golden_disabled_identity:
    name: Golden identity (scheduler.disabled)
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install deps (dev+test extras) + YAML
        run: |
          python -m pip install -U pip
          pip install -e .[dev,test]
          pip install pyyaml

      - name: Clean logs/data
        run: |
          rm -rf ./.logs || true
          rm -rf ./.data || true
          mkdir -p ./.logs

      # Run the golden comparison if the script exists; otherwise skip (so PRs can land script+fixtures together)
      - name: Run golden disabled identity guard
        env:
          CI: "true"
          CLEMATIS_NETWORK_BAN: "1"
        run: |
          set -euo pipefail
          if [ -f scripts/ci_compare_golden.py ]; then
            echo "Running golden comparison (scheduler.enabled=false)â€¦"
            python scripts/ci_compare_golden.py
          else
            echo "Skipping golden comparison: scripts/ci_compare_golden.py not found."
            echo "Add the script and fixtures under tests/golden/pre_m5_disabled/ to enable this check."
          fi

  reproducible_build:
    name: Reproducible build (wheel + sdist)
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install build tooling
        run: |
          python -m pip install -U pip
          pip install build wheel

      - name: Compute SOURCE_DATE_EPOCH from Git
        id: sde
        run: echo "ts=$(git log -1 --pretty=%ct)" >> "$GITHUB_OUTPUT"

      - name: Export SDE for this job
        run: echo "SOURCE_DATE_EPOCH=${{ steps.sde.outputs.ts }}" >> "$GITHUB_ENV"

      - name: Export deterministic env
        run: |
          echo "PYTHONHASHSEED=0" >> "$GITHUB_ENV"
          echo "TZ=UTC" >> "$GITHUB_ENV"
          echo "LC_ALL=C.UTF-8" >> "$GITHUB_ENV"
          echo "LANG=C.UTF-8" >> "$GITHUB_ENV"

      - name: Clean tree (before build #1)
        run: |
          git clean -xfd

      - name: Build #1 and record hashes
        run: |
          set -euo pipefail
          rm -rf dist build
          python -m build
          # Record SHA256 hashes to RUNNER_TEMP (kept out of sdist)
          python - <<'PY'
          import hashlib, json, os, glob, tarfile

          def sha256_file(path):
              h = hashlib.sha256()
              with open(path, "rb") as f:
                  for chunk in iter(lambda: f.read(1<<20), b""):
                      h.update(chunk)
              return h.hexdigest()

          def sdist_content_hash(path):
              # Hash only the content of regular files inside the tar.gz, ignoring tar/gzip metadata.
              items = []
              with tarfile.open(path, "r:gz") as tf:
                  for m in tf.getmembers():
                      # Skip egg-info metadata folders; only hash payload semantics
                      if "/.egg-info/" in m.name or m.name.endswith(".egg-info"):
                          continue
                      # Also skip top-level PKG-INFO (sdist metadata)
                      if m.name == "PKG-INFO" or m.name.endswith("/PKG-INFO"):
                          continue
                      if not m.isfile():
                          continue
                      f = tf.extractfile(m)
                      data = f.read() if f else b""
                      h = hashlib.sha256(data).hexdigest()
                      items.append((m.name, h))
              items.sort()
              agg = hashlib.sha256()
              for name, h in items:
                  agg.update(name.encode("utf-8") + b"\0" + h.encode("ascii") + b"\n")
              return agg.hexdigest()

          out = {}
          for p in sorted(glob.glob("dist/clematis-*")):
              base = os.path.basename(p)
              if base.endswith(".tar.gz"):
                  out[base] = sdist_content_hash(p)
              else:
                  out[base] = sha256_file(p)

          out_path = os.path.join(os.environ.get("RUNNER_TEMP","."), "repro_sha_1.json")
          with open(out_path, "w") as f:
              json.dump(out, f, separators=(",", ":"))
          print("Wrote:", out_path, out)
          PY
          # Capture sdist file listing for debugging
          SDIST="$(ls dist/clematis-*.tar.gz)"
          tar -tzf "$SDIST" | sort > "$RUNNER_TEMP/sdist1.txt"

      - name: Clean tree (before build #2)
        run: |
          git clean -xfd

      - name: Build #2 and record hashes (same SDE)
        run: |
          set -euo pipefail
          rm -rf dist build
          python -m build
          # Record SHA256 hashes to RUNNER_TEMP (kept out of sdist)
          python - <<'PY'
          import hashlib, json, os, glob, tarfile

          def sha256_file(path):
              h = hashlib.sha256()
              with open(path, "rb") as f:
                  for chunk in iter(lambda: f.read(1<<20), b""):
                      h.update(chunk)
              return h.hexdigest()

          def sdist_content_hash(path):
              items = []
              with tarfile.open(path, "r:gz") as tf:
                  for m in tf.getmembers():
                      # Skip egg-info metadata folders; only hash payload semantics
                      if "/.egg-info/" in m.name or m.name.endswith(".egg-info"):
                          continue
                      # Also skip top-level PKG-INFO (sdist metadata)
                      if m.name == "PKG-INFO" or m.name.endswith("/PKG-INFO"):
                          continue
                      if not m.isfile():
                          continue
                      f = tf.extractfile(m)
                      data = f.read() if f else b""
                      h = hashlib.sha256(data).hexdigest()
                      items.append((m.name, h))
              items.sort()
              agg = hashlib.sha256()
              for name, h in items:
                  agg.update(name.encode("utf-8") + b"\0" + h.encode("ascii") + b"\n")
              return agg.hexdigest()

          out = {}
          for p in sorted(glob.glob("dist/clematis-*")):
              base = os.path.basename(p)
              if base.endswith(".tar.gz"):
                  out[base] = sdist_content_hash(p)
              else:
                  out[base] = sha256_file(p)

          out_path = os.path.join(os.environ.get("RUNNER_TEMP","."), "repro_sha_2.json")
          with open(out_path, "w") as f:
              json.dump(out, f, separators=(",", ":"))
          print("Wrote:", out_path, out)
          PY
          # Capture sdist file listing for debugging
          SDIST="$(ls dist/clematis-*.tar.gz)"
          tar -tzf "$SDIST" | sort > "$RUNNER_TEMP/sdist2.txt"

      - name: Compare hashes (expect identical)
        run: |
          set -euo pipefail
          diff -u "$RUNNER_TEMP/repro_sha_1.json" "$RUNNER_TEMP/repro_sha_2.json"

      - name: Debug sdist content diff
        if: failure()
        run: |
          set -euo pipefail
          echo '--- sdist1 (first build) ---'
          cat "$RUNNER_TEMP/sdist1.txt" || true
          echo '--- sdist2 (second build) ---'
          cat "$RUNNER_TEMP/sdist2.txt" || true
          echo '--- unified diff ---'
          diff -u "$RUNNER_TEMP/sdist1.txt" "$RUNNER_TEMP/sdist2.txt" || true